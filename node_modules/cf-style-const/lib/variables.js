'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _polished = require('polished');

const showWarnings = process.env.NODE_ENV !== 'production';

const colorOffsetDark = 0.07;
const colorOffsetLight = 0.15;

const theme = {
  breakpoints: {
    mobile: '13.6em',
    mobileWide: '30.4em',
    tablet: '47.2em',
    tabletLegacy: '49.2em',
    tabletWide: '55em',
    desktop: '64em',
    desktopLegacy: '66em',
    desktopLarge: '97.6em'
  },
  fontSizes: [10, 12, 14, 16, 20, 24, 32, 48, 64, 80],
  space: [0, 4, 8, 16, 32, 64, 128, 256],
  measure: {
    narrow: '20em',
    default: '30em',
    wide: '34em'
  },
  lineHeights: {
    solid: 1,
    title: 1.25,
    copy: 1.5
  },
  gradient: {
    skyDew: 'linear-gradient(to right, #76C4E2, #85CBA8)',
    twilightDew: 'linear-gradient(to right, #8176B5, #85CBA8)',
    twilightSky: 'linear-gradient(to right, #8176B5, #76C4E2)',
    twilightSunset: 'linear-gradient(to right, #8176B5, #BA77B1)',
    twilightDawn: 'linear-gradient(to right, #8176B5, #F16975)',
    dawnSunrise: 'linear-gradient(to right, #F16975, #F69259)',
    sunriseLightning: 'linear-gradient(to right, #F69259, #FFDB6F)',
    dewLightning: 'linear-gradient(to right, #85CBA8, #FFDB6F)'
  },
  colors: {
    black: '#000',
    white: '#fff',
    cfOrange: '#f28021',
    marketing: {
      orange: '#f58220',
      lightOrange: '#fbae40',
      red: '#e04e64',
      lightRed: '#e27179',
      green: '#71c492',
      lightGreen: '#9fd3b5',
      cyan: '#2da7cb',
      lightCyan: '#89c4e1',
      purple: '#7d4788',
      lightPurple: '#af7baf',
      blue: '#00517f',
      lightBlue: '#4f8cc8',
      gray: ['#404242', '#707070', '#aaaaaa', '#dddddd', '#f5f5f5']
    },
    vendor: {
      twitter: '#00aced',
      facebook: '#3b5998'
    },
    red: ['#430c15', '#711423', '#a01c32', '#bf223c', '#da304c', '#e35f75', '#ec93a2', '#f3bac3', '#f9dce1', '#fcf0f2'],
    orange: ['#341a04', '#5b2c06', '#813f09', '#a24f0b', '#b6590d', '#e06d10', '#f4a15d', '#f8c296', '#fbdbc1', '#fdf1e7'],
    gold: ['#2c1c02', '#573905', '#744c06', '#8e5c07', '#a26a09', '#c7820a', '#f4a929', '#f8cd81', '#fbe2b6', '#fdf3e2'],
    green: ['#0f2417', '#1c422b', '#285d3d', '#31724b', '#398557', '#46a46c', '#79c698', '#b0ddc2', '#d8eee1', '#eff8f3'],
    cyan: ['#0c2427', '#164249', '#1d5962', '#26727e', '#2b818e', '#35a0b1', '#66c3d1', '#a5dce4', '#d0edf1', '#e9f7f9'],
    blue: ['#0c2231', '#163d57', '#1f567a', '#276d9b', '#2c7cb0', '#479ad1', '#7cb7de', '#add2eb', '#d6e9f5', '#ebf4fa'],
    indigo: ['#181e34', '#2c365e', '#404e88', '#5062aa', '#6373b6', '#8794c7', '#a5aed5', '#c8cde5', '#e0e3f0', '#f1f3f8'],
    violet: ['#2d1832', '#502b5a', '#753f83', '#8e4c9e', '#9f5bb0', '#b683c3', '#c9a2d2', '#dbc1e1', '#ebddee', '#f7f1f8'],
    gray: ['#1d1f20', '#36393a', '#4e5255', '#62676a', '#72777b', '#92979b', '#b7bbbd', '#d5d7d8', '#eaebeb', '#f7f7f8']
  },

  color: {},

  fontSize: '15px',
  boxShadow: '0 0 20px 0 rgba(136,136,136,0.50)',
  inputFontSize: '13px',
  lineHeight: 1.5,
  inputLineHeight: 1.4,
  inputHeight: '2.26667rem',
  em: '1em',
  rem: '1rem',
  fontFamily: '"Open Sans", Helvetica, Arial, sans-serif',
  weightLight: 300,
  weightNormal: 400,
  weightSemiBold: 600,
  weightBold: 700,
  fontWeight: 400,
  fontWeightLight: 300,
  borderRadius: '2px',
  fontColor: (0, _polished.darken)(0.8, '#fff'),
  colorOffsetDark,
  colorGrayLight: (0, _polished.darken)(0.13, '#fff'), // deprecated
  zIndexMax: 1000,
  zIndexModal: 1400
};

const namedColors = {
  grass: { value: '#9BCA3E', replacement: 'green[6]' },
  fern: { value: '#85B832', replacement: 'green[5]' },
  marine: { value: '#2F7BBF', replacement: 'blue[4]' },
  thunder: { value: '#286EA4', replacement: 'blue[3]' },
  apple: { value: '#BD2527', replacement: 'red[3]' },
  cherry: { value: '#A61E20', replacement: 'red[2]' },
  tangerine: { value: '#FF7900', replacement: 'orange[6]' },
  pumpkin: { value: '#E66B00', replacement: 'orange[4]' },
  carrot: { value: '#f56500', replacement: 'orange[5]' },
  moonshine: { value: '#F7F7F7', replacement: 'gray[9]' },
  dust: { value: '#ebebeb', replacement: 'gray[8]' },
  smoke: { value: '#e0e0e0', replacement: 'gray[7]' },
  ash: { value: '#CCCCCC', replacement: 'gray[6]' },
  hail: { value: '#BCBEC0', replacement: 'gray[5]' },
  storm: { value: '#808285', replacement: 'gray[4]' },
  cement: { value: '#7D7D7D', replacement: 'gray[4]' },
  dusk: { value: '#4D4D4F', replacement: 'gray[3]' },
  night: { value: '#404041', replacement: 'gray[2]' },
  charcoal: { value: '#333333', replacement: 'gray[1]' },
  leaf: { value: '#cde49e', replacement: 'green[7]' },
  pine: { value: '#f5faeb', replacement: 'green[9]' },
  blueberry: { value: '#97bddf', replacement: 'blue[7]' },
  ice: { value: '#eaf2f8', replacement: 'blue[9]' },
  water: { value: '#cbdeef', replacement: 'blue[8]' },
  shrimp: { value: '#de9293', replacement: 'red[6]' },
  poppy: { value: '#f8e9e9', replacement: 'red[9]' },
  rain: { value: '#408BC9', replacement: 'blue[4]' },
  sky: { value: '#76C4E2', replacement: 'blue[6]' },
  dew: { value: '#85CBA8', replacement: 'green[6]' },
  deepsea: { value: '#1E4E79', replacement: 'blue[1]' },
  twilight: { value: '#8176B5', replacement: 'violet[5]' },
  sunset: { value: '#BA77B1', replacement: 'violet[4]' },
  dawn: { value: '#F16975', replacement: 'red[5]' },
  sunrise: { value: '#F69259', replacement: 'orange[7]' },
  lightning: { value: '#FFDB6F', replacement: 'gold[7]' }
};

const themeColors = {
  fontColorHeadingCaption: { value: '#888', replacement: 'colors.gray[4]' },
  disabledBackground: { value: '#ededed', replacement: 'colors.gray[8]' },
  bodyBackground: { value: '#ebebeb', replacement: 'colors.gray[8]' },
  bodyAccentColor: {
    value: (0, _polished.darken)(0.8, '#fff'),
    replacement: 'colors.gray[1]'
  },
  bodyOffsetColor: {
    value: (0, _polished.darken)(0.53, '#fff'),
    replacement: 'colors.gray[4]'
  },
  colorWhite: { value: '#fff', replacement: 'colors.white' },
  colorBlack: { value: '#000', replacement: 'colors.black' },
  colorInfo: { value: '#00a9eb', replacement: 'colors.blue[5]' },
  colorSuccess: { value: '#68970f', replacement: 'colors.green[5]' },
  colorWarning: { value: '#fca520', replacement: 'colors.gold[6]' },
  colorError: { value: '#ff3100', replacement: 'colors.red[4]' },
  colorMuted: { value: (0, _polished.darken)(0.5125, '#fff'), replacement: 'colors.gray[4]' },
  colorSmoke: { value: '#f2f2f2', replacement: 'colors.gray[9]' },
  colorBlue: { value: '#2f7bbf', replacement: 'colors.blue[4]' },
  colorBlueLight: {
    value: (0, _polished.lighten)(colorOffsetLight, '#2f7bbf'),
    replacement: 'colors.blue[5]'
  },
  colorBlueDark: {
    value: (0, _polished.darken)(colorOffsetDark, '#2f7bbf'),
    replacement: 'colors.blue[3]'
  },
  colorOrange: { value: '#ff7900', replacement: 'colors.orange[6]' },
  colorOrangeLight: {
    value: (0, _polished.lighten)(colorOffsetLight, '#ff7900'),
    replacement: 'colors.orange[7]'
  },
  colorOrangeDark: {
    value: (0, _polished.darken)(colorOffsetDark, '#ff7900'),
    replacement: 'colors.orange[5]'
  },
  colorGray: { value: (0, _polished.darken)(0.5125, '#fff'), replacement: 'colors.gray[4]' },
  colorGrayLight: {
    value: (0, _polished.darken)(0.13, '#fff'),
    replacement: 'colors.gray[7]'
  },
  colorGrayLightOnboarding: { value: '#F7F7F7', replacement: 'colors.gray[9]' },
  colorGrayDark: { value: (0, _polished.darken)(0.8, '#fff'), replacement: 'colors.gray[1]' },
  colorGrayBorder: { value: '#666', replacement: 'colors.gray[3]' },
  colorGreen: { value: '#9bca3e', replacement: 'colors.green[6]' },
  colorGreenLight: {
    value: (0, _polished.lighten)(colorOffsetLight, '#9bca3e'),
    replacement: 'colors.green[7]'
  },
  colorGreenDark: {
    value: (0, _polished.darken)(colorOffsetDark, '#9bca3e'),
    replacement: 'colors.green[5]'
  },
  colorRed: { value: '#bd2527', replacement: 'colors.red[3]' },
  colorRedLight: {
    value: (0, _polished.lighten)(colorOffsetLight, '#bd2527'),
    replacement: 'colors.red[4]'
  },
  colorRedDark: {
    value: (0, _polished.darken)(colorOffsetDark, '#bd2527'),
    replacement: 'colors.red[2]'
  },
  colorYellow: { value: '#ffd24d', replacement: 'colors.gold[6]' },
  colorYellowLight: {
    value: (0, _polished.lighten)(colorOffsetLight, '#ffd24d'),
    replacement: 'colors.gold[7]'
  },
  colorYellowDark: {
    value: (0, _polished.darken)(colorOffsetDark, '#ffd24d'),
    replacement: 'colors.gold[5]'
  },
  colorPink: { value: '#d91698', replacement: 'colors.violet[3]' },
  colorPinkLight: {
    value: (0, _polished.lighten)(colorOffsetLight, '#d91698'),
    replacement: 'colors.violet[4]'
  },
  colorPinkDark: {
    value: (0, _polished.darken)(colorOffsetDark, '#d91698'),
    replacement: 'colors.violet[2]'
  },
  colorPurple: { value: '#9545e5', replacement: 'colors.violet[3]' },
  colorPurpleLight: {
    value: (0, _polished.lighten)(colorOffsetLight, '#9545e5'),
    replacement: 'colors.violet[4]'
  },
  colorPurpleDark: {
    value: (0, _polished.darken)(colorOffsetDark, '#9545e5'),
    replacement: 'colors.violet[2]'
  },
  colorTwitterBlue: { value: '#00aced', replacement: 'colors.vendor.twitter' },
  colorFacebookBlue: {
    value: '#3b5998',
    replacement: 'colors.vendor.facebook'
  },
  colorMainBackground: { value: '#e6e6e6', replacement: 'colors.gray[8]' },
  colorOverlay: {
    value: 'rgba(0, 0, 0, .7)',
    replacement: 'rgba(0, 0, 0, .7)'
  },
  colorImportantInformation: {
    value: 'rgba(64,139,201,0.2)',
    replacement: 'rgba(64,139,201,0.2)'
  }
};

Object.keys(namedColors).forEach(color => {
  Object.defineProperty(theme.colors, color, {
    get: function () {
      if (showWarnings) {
        console.warn(`Usage of named colors (such as ${color}) is now deprecated. Try using ${namedColors[color].replacement} instead.`);
      }

      return namedColors[color].value;
    },
    enumerable: true
  });
});

Object.keys(themeColors).forEach(color => {
  Object.defineProperty(theme, color, {
    get: function () {
      // if (showWarnings) {
      // console.warn(
      //   `Usage of named colors (such as ${color}) is now deprecated. Try using ${themeColors[
      //     color
      //   ].replacement} instead.`
      // );
      // }
      return themeColors[color].value;
    },
    enumerable: true
  });
});

Object.keys(theme.colors).forEach(color => {
  Object.defineProperty(theme.color, color, {
    get: function () {
      if (showWarnings) {
        console.warn(`Usage of 'theme.color' is deprecated. Use 'theme.colors' instead.`);
      }

      return theme.colors[color];
    },
    enumerable: true
  });
});

exports.default = theme;