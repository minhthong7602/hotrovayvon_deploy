'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cfStyleContainer = require('cf-style-container');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getHeight = size => {
  let height;
  switch (size) {
    case '1.5x':
      height = 22;
      break;
    case '2x':
      height = 30;
      break;
    case '2.5x':
      height = 37;
      break;
    case '3x':
      height = 45;
      break;
    case '3.5x':
      height = 52;
      break;
    case '4x':
      height = 60;
      break;
    default:
      height = 15;
  }
  return height;
};

const loadingStyles = ({ theme, size }) => {
  return {
    height: getHeight(size),
    animationDuration: '2.5s',
    animationIterationCount: 'infinite',
    animationTimingFunction: 'linear',
    '>svg': {
      height: '100%',
      fill: 'transparent',
      strokeWidth: 6,
      stroke: theme.colors.hail,
      animationName: {
        '0%': {
          strokeDasharray: '1,95',
          strokeDashoffset: 0,
          transform: 'rotate(0deg)'
        },
        '50%': { strokeDasharray: '85,95', strokeDashoffset: -25 },
        '100%': {
          strokeDasharray: '85,95',
          strokeDashoffset: -93,
          transform: 'rotate(360deg)'
        }
      },
      animationDuration: '1.9s',
      animationIterationCount: 'infinite',
      animationTimingFunction: 'linear'
    }
  };
};

class Loading extends _react2.default.Component {
  render() {
    const { className } = this.props;
    return _react2.default.createElement(
      'div',
      { className: className },
      _react2.default.createElement(
        'svg',
        { xmlns: 'http://www.w3.org/2000/svg', viewBox: '0 0 40 40' },
        _react2.default.createElement('circle', { cx: '50%', cy: '50%', r: '40%' })
      )
    );
  }
}

Loading.propTypes = {
  className: _propTypes2.default.string,
  size: _propTypes2.default.oneOf(['1.5x', '2x', '2.5x', '3x', '3.5x', '4x'])
};
Loading.displayName = 'Loading';
exports.default = (0, _cfStyleContainer.createComponent)(loadingStyles, Loading);