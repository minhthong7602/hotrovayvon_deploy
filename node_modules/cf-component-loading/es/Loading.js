var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';
import { createComponent } from 'cf-style-container';

var getHeight = function getHeight(size) {
  var height = void 0;
  switch (size) {
    case '1.5x':
      height = 22;
      break;
    case '2x':
      height = 30;
      break;
    case '2.5x':
      height = 37;
      break;
    case '3x':
      height = 45;
      break;
    case '3.5x':
      height = 52;
      break;
    case '4x':
      height = 60;
      break;
    default:
      height = 15;
  }
  return height;
};

var loadingStyles = function loadingStyles(_ref) {
  var theme = _ref.theme,
      size = _ref.size;

  return {
    height: getHeight(size),
    animationDuration: '2.5s',
    animationIterationCount: 'infinite',
    animationTimingFunction: 'linear',
    '>svg': {
      height: '100%',
      fill: 'transparent',
      strokeWidth: 6,
      stroke: theme.colors.hail,
      animationName: {
        '0%': {
          strokeDasharray: '1,95',
          strokeDashoffset: 0,
          transform: 'rotate(0deg)'
        },
        '50%': { strokeDasharray: '85,95', strokeDashoffset: -25 },
        '100%': {
          strokeDasharray: '85,95',
          strokeDashoffset: -93,
          transform: 'rotate(360deg)'
        }
      },
      animationDuration: '1.9s',
      animationIterationCount: 'infinite',
      animationTimingFunction: 'linear'
    }
  };
};

var Loading = function (_React$Component) {
  _inherits(Loading, _React$Component);

  function Loading() {
    _classCallCheck(this, Loading);

    return _possibleConstructorReturn(this, (Loading.__proto__ || Object.getPrototypeOf(Loading)).apply(this, arguments));
  }

  _createClass(Loading, [{
    key: 'render',
    value: function render() {
      var className = this.props.className;

      return React.createElement(
        'div',
        { className: className },
        React.createElement(
          'svg',
          { xmlns: 'http://www.w3.org/2000/svg', viewBox: '0 0 40 40' },
          React.createElement('circle', { cx: '50%', cy: '50%', r: '40%' })
        )
      );
    }
  }]);

  return Loading;
}(React.Component);

Loading.propTypes = {
  className: PropTypes.string,
  size: PropTypes.oneOf(['1.5x', '2x', '2.5x', '3x', '3.5x', '4x'])
};
Loading.displayName = 'Loading';
export default createComponent(loadingStyles, Loading);