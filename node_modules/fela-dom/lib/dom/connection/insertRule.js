'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = insertRule;

var _felaUtils = require('fela-utils');

var _insertRuleInDevMode = require('./insertRuleInDevMode');

var _insertRuleInDevMode2 = _interopRequireDefault(_insertRuleInDevMode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function insertRule(_ref, renderer, node) {
  var selector = _ref.selector,
      declaration = _ref.declaration,
      support = _ref.support,
      pseudo = _ref.pseudo;

  // only use insertRule in production as browser devtools might have
  // weird behavior if used together with insertRule at runtime
  if (renderer.devMode) {
    return (0, _insertRuleInDevMode2.default)(renderer, node);
  }

  try {
    var score = (0, _felaUtils.getRuleScore)(renderer.ruleOrder, pseudo);
    var cssRules = node.sheet.cssRules;

    var index = cssRules.length;

    // TODO: (PERF) instead of checking the score every time
    // we could save the latest score=0 index to quickly inject
    // basic styles and only check for score!=0 (e.g. pseudo classes)
    for (var i = 0, len = cssRules.length; i < len; ++i) {
      if (cssRules[i].score > score) {
        index = i;
        break;
      }
    }

    var cssRule = (0, _felaUtils.generateCSSRule)(selector, declaration);

    if (support.length > 0) {
      var cssSupportRule = (0, _felaUtils.generateCSSSupportRule)(support, cssRule);
      node.sheet.insertRule(cssSupportRule, index);
    } else {
      node.sheet.insertRule(cssRule, index);
    }

    cssRules[index].score = score;
  } catch (e) {
    // TODO: warning?
  }
}