var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable behance/no-deprecated */
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { withTheme } from 'react-fela'; // eslint-disable-line behance/no-deprecated
import { hocDisplayName, addDisplayName } from './displayName';

export var getDisplayName = hocDisplayName('WithStaticStyles');

var applyStaticStyles = function applyStaticStyles(staticStyles, ComponentToWrap) {
  var CompWithStaticStyles = function (_PureComponent) {
    _inherits(CompWithStaticStyles, _PureComponent);

    function CompWithStaticStyles() {
      _classCallCheck(this, CompWithStaticStyles);

      return _possibleConstructorReturn(this, (CompWithStaticStyles.__proto__ || Object.getPrototypeOf(CompWithStaticStyles)).apply(this, arguments));
    }

    _createClass(CompWithStaticStyles, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        var contextTheme = this.props.theme || {};
        staticStyles = typeof staticStyles === 'function' ? staticStyles(contextTheme) : staticStyles;
        this.context.renderer.renderStatic(staticStyles);
      }
    }, {
      key: 'render',
      value: function render() {
        return React.createElement(ComponentToWrap, this.props);
      }
    }]);

    return CompWithStaticStyles;
  }(PureComponent);

  CompWithStaticStyles.contextTypes = {
    renderer: PropTypes.object
  };

  CompWithStaticStyles.propTypes = {
    theme: PropTypes.object
  };

  var WithThemeHOC = withTheme(CompWithStaticStyles);
  addDisplayName(WithThemeHOC, ComponentToWrap, getDisplayName);

  return WithThemeHOC;
};

export default applyStaticStyles;