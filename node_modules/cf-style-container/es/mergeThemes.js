var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

import { static as Immutable } from 'seamless-immutable';

var mergeThemes = function mergeThemes(baseTheme) {
  for (var _len = arguments.length, themes = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    themes[_key - 1] = arguments[_key];
  }

  return themes ? themes.reduce(function (acc, theme) {
    if (typeof theme === 'function') {
      return Immutable.merge(acc, Immutable(theme(baseTheme)), {
        deep: true
      });
    } else if ((typeof theme === 'undefined' ? 'undefined' : _typeof(theme)) === 'object') {
      return Immutable.merge(acc, Immutable(theme), { deep: true });
    }
    throw new Error('theme must be either a function or an object');
  }, Immutable(baseTheme)) : Immutable(baseTheme);
};

export default mergeThemes;