var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable behance/no-deprecated */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { withTheme, ThemeProvider } from 'react-fela'; // eslint-disable-line behance/no-deprecated
import mergeThemes from './mergeThemes';
import { hocDisplayName, addDisplayName } from './displayName';

export var getDisplayName = hocDisplayName('Themed');

var applyTheme = function applyTheme(ComponentToWrap) {
  for (var _len = arguments.length, themes = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    themes[_key - 1] = arguments[_key];
  }

  var ThemedComponent = function (_Component) {
    _inherits(ThemedComponent, _Component);

    function ThemedComponent() {
      _classCallCheck(this, ThemedComponent);

      return _possibleConstructorReturn(this, (ThemedComponent.__proto__ || Object.getPrototypeOf(ThemedComponent)).apply(this, arguments));
    }

    _createClass(ThemedComponent, [{
      key: 'render',
      value: function render() {
        return React.createElement(
          ThemeProvider,
          { theme: mergeThemes.apply(undefined, [this.props.theme || {}].concat(themes)) },
          React.createElement(ComponentToWrap, this.props)
        );
      }
    }]);

    return ThemedComponent;
  }(Component);

  ThemedComponent._isFelaComponent = true;
  ThemedComponent.propTypes = {
    theme: PropTypes.object
  };

  var WithThemeHOC = withTheme(ThemedComponent);
  addDisplayName(WithThemeHOC, ComponentToWrap, getDisplayName);

  return WithThemeHOC;
};

export default applyTheme;